version: '3.8'
services:
  # A typical service structure:
  # build/image
  # ports
  # environment
  # depends_on:
  #   - service_name
  #   condition: [service_healthy, service_started, service_completed_successfully]
  # volumes
  # networks
  # restart: [no, always, on-failure, unless-stopped]
  # healthcheck:
  #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #   interval: 30s
  #   timeout: 10s
  #   retries: 3
  ml-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      # Environment variables for database and cache connections
      - DATABASE_URL=postgresql://mluser:mlpass@postgres:5432/mldb
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - ml-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: mldb
      POSTGRES_USER: mluser
      POSTGRES_PASSWORD: mlpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mluser -d mldb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass mlredispass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ml-network

volumes:
  postgres_data:
  redis_data:

networks:
  ml-network: 
    driver: bridge
